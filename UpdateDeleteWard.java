
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

public class UpdateDeleteWard extends javax.swing.JFrame {

    myDBCon dbCon;
    ResultSet rsWard;

    /**
     * Creates new form AddEmployee
     */
    public UpdateDeleteWard() {
        initComponents();
        this.setLocationRelativeTo(null);
        
        lblWardIdError.setVisible(false);
        lblWardNameError.setVisible(false);
        lblWardLocError.setVisible(false);
        dbCon = new myDBCon();
        getNewData();
    }

    private void getNewData() {

        try {
            rsWard = dbCon.executeStatement("SELECT ward_id, ward_name, ward_location FROM ward ORDER BY ward_id ASC ");

            rsWard.beforeFirst();
            rsWard.first();
            populateFields();
        } catch (SQLException e) {
            javax.swing.JLabel label = new javax.swing.JLabel("SQL Error - Display selected empno.");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        txtWardId = new javax.swing.JTextField();
        lblWardIdError = new javax.swing.JLabel();
        lblWardLocError = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblWardNameError = new javax.swing.JLabel();
        txtWardLoc = new javax.swing.JTextField();
        txtWardName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Update/Delete Employee");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Update/Delete Ward");

        btnUpdate.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnNext.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnNext.setText("Next >>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnPrevious.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnPrevious.setText("<< Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        txtWardId.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        lblWardIdError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblWardIdError.setForeground(new java.awt.Color(255, 0, 0));
        lblWardIdError.setText("error label");

        lblWardLocError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblWardLocError.setForeground(new java.awt.Color(255, 0, 0));
        lblWardLocError.setText("error label");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("WARD ID:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("WARD NAME:");

        lblWardNameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblWardNameError.setForeground(new java.awt.Color(255, 0, 0));
        lblWardNameError.setText("error label");

        txtWardLoc.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtWardLoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtWardLocActionPerformed(evt);
            }
        });

        txtWardName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("WARD LOCATION:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(btnPrevious))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtWardName)
                                        .addComponent(txtWardLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtWardId, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblWardNameError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblWardLocError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblWardIdError, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnUpdate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnNext))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(75, 75, 75)))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtWardId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblWardIdError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtWardName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblWardNameError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtWardLoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblWardLocError))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrevious)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnNext))
                .addGap(0, 25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void populateFields() {
        try {
            txtWardId.setText(rsWard.getString("ward_id"));
            txtWardName.setText(rsWard.getString("ward_name"));
            txtWardLoc.setText(rsWard.getString("ward_location"));
            EnableDisableButtons();
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeletePatient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void MoveNext() {
        clearErrorLabels();
        try {
            // TODO add your handling code here:
            if (!rsWard.isLast()) {
                rsWard.next();
                populateFields();
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeletePatient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        MoveNext();
    }//GEN-LAST:event_btnNextActionPerformed

    private void MovePrevious() {
        clearErrorLabels();

        try {
            // TODO add your handling code here:
            if (!rsWard.isFirst()) {
                rsWard.previous();
                populateFields();
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeletePatient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void EnableDisableButtons() {
        try {
            if (rsWard.isFirst()) {
                btnPrevious.setEnabled(false);
            } else {
                btnPrevious.setEnabled(true);
            }
            if (rsWard.isLast()) {
                btnNext.setEnabled(false);
            } else {
                btnNext.setEnabled(true);
            }
        } catch (SQLException ex) {
            Logger.getLogger(UpdateDeletePatient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        // TODO add your handling code here:
        MovePrevious();
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        //ask confirmation
         int confirmationChoice = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this?", "Confirm delete", JOptionPane.WARNING_MESSAGE);
        if (confirmationChoice != JOptionPane.OK_OPTION){
            return;
        }
        try {
            // make the result set scrolable forward/backward updatable
            String prepSQL = "DELETE ward WHERE ward_id = " + txtWardId.getText().trim();
            int result = dbCon.executePrepared(prepSQL);
            if (result > 0) {
                javax.swing.JLabel label = new javax.swing.JLabel("Ward No " + txtWardId.getText().trim() + " deleted successfully.");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                getNewData();
            }
        } catch (SQLException e) {
            //error deleting employee
            JOptionPane.showMessageDialog(null, "Error deleting ward.");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    void clearErrorLabels() {
        lblWardIdError.setText("");
        lblWardIdError.setVisible(false);
        lblWardNameError.setText("");
        lblWardNameError.setVisible(false);
        lblWardLocError.setText("");
        lblWardLocError.setVisible(false);

    }

    public boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    public boolean isDouble(String s) {
        try {
            Double.parseDouble(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    boolean isValidData() {
          clearErrorLabels();
        boolean result = true; // assume all details are true, set to false if otherwise 
        // you need to check format deails and make sure they are consistent with DB 
        if (txtWardId.getText().trim().isEmpty() || !isInteger(txtWardId.getText().trim())) {
            if (txtWardId.getText().trim().isEmpty()) {
                lblWardIdError.setText("Invalid. Cannot be empty.");
            } else if (!isInteger(txtWardId.getText().trim())) {
                lblWardIdError.setText("Invalid. Must be integer.");
            }
            lblWardIdError.setVisible(true);
            result = false;
        }

        if (txtWardName.getText().trim().isEmpty() || (txtWardName.getText().trim().length() > 30)) {
            if (txtWardName.getText().trim().isEmpty()) {
                lblWardNameError.setText("Invalid. Cannot be empty.");
            } else if ((txtWardName.getText().trim().length() > 30)) {
                lblWardNameError.setText("Invalid. Must be <= 30 chars.");
            }
            lblWardNameError.setVisible(true);
            result = false;
        }

        if (txtWardLoc.getText().trim().isEmpty() || (txtWardLoc.getText().trim().length() > 30)) {
            if (txtWardLoc.getText().trim().isEmpty()) {
                lblWardLocError.setText("Invalid. Cannot be empty.");
            } else if (txtWardLoc.getText().trim().length() > 30) {
                lblWardLocError.setText("Invalid. Must be <= 30 chars.");
            }
            lblWardLocError.setVisible(true);
            result = false;
        }

        return result;
    }

    private boolean isDuplicate(int wardid) throws SQLException {
        boolean isduplicate = false;
        String stmtSQL = "SELECT ward_id FROM ward WHERE ward_id = " + wardid;
        ResultSet rs = dbCon.executeStatement(stmtSQL);
        // isBeforeFirst() returns false if there are no data in the resultset
        isduplicate = rs.isBeforeFirst();

        return isduplicate;
    }
    
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        //ask for confirmation
        int confirmationChoice = JOptionPane.showConfirmDialog(null, "Are you sure you want to update this?", "Confirm update", JOptionPane.WARNING_MESSAGE);
        if (confirmationChoice != JOptionPane.OK_OPTION){
            return;
        }
        try {
         
            if (isValidData()) {
                
                if (!(txtWardId.getText().trim().equals(rsWard.getString("ward_id"))) && isDuplicate(Integer.parseInt(txtWardId.getText().trim()))) {
                    lblWardIdError.setText("Ward id already exists");
                    lblWardIdError.setVisible(true);

                    javax.swing.JLabel label = new javax.swing.JLabel("Ward ID already exists");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                
                
                String prepSQL = "UPDATE ward SET ward_id = " + 
                        txtWardId.getText().trim() + 
                        ", ward_name = '" + txtWardName.getText().trim().toUpperCase() +
                        "', ward_location = '" + txtWardLoc.getText().trim().toUpperCase() + 
                        "' WHERE ward_id = " + rsWard.getString("ward_id");

                int result = dbCon.executePrepared(prepSQL);
                if (result > 0) {
                    //if successfull
                    javax.swing.JLabel label = new javax.swing.JLabel("Ward No " + txtWardId.getText() + " updated successfully.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);

                    getNewData();
                }
                } else {
                //validation error
                javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);

            }

        } catch (SQLException e) {
            //error updating eployee
            JOptionPane.showMessageDialog(null, "Error updating ward.");

        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtWardLocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtWardLocActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtWardLocActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblWardIdError;
    private javax.swing.JLabel lblWardLocError;
    private javax.swing.JLabel lblWardNameError;
    private javax.swing.JTextField txtWardId;
    private javax.swing.JTextField txtWardLoc;
    private javax.swing.JTextField txtWardName;
    // End of variables declaration//GEN-END:variables
}
